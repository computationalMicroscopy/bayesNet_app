# -*- coding: utf-8 -*-
"""gefaehrdung_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YLRGk6-UJ5AdXhDdrs7tCzB9w1t2PGAX
"""

import streamlit as st
import random as r
import pandas as pd
import altair as alt  # Für ansprechende Diagramme

#A priori Knoten / Elternknoten
familiaeres_uUmfeld={
    'stabil':0.7,
    'instabil':0.3
}

psychische_gesundheit={
    'unauffällig':0.96,
    'auffällig':0.04
}

schulische_unterstuetzung={
    'vorhanden':0.55,
    'mangelhaft':45
}

#Mediatoren / Verhaltens- und Leistungsmerkmale

aggressives_verhalten={
    'stabil,unauffällig':{ "aggressivja" : 0.03 , "aggressivnein": 0.97},
    'stabil,auffällig':{ "aggressivja" : 0.25 , "aggressivnein": 0.75},
    'instabil,unauffällig':{ "aggressivja" : 0.3 , "aggressivnein": 0.7},
    'instabil,auffällig':{ "aggressivja" : 0.9 , "aggressivnein": 0.1}
}

soziale_isolation={
    "stabil,unauffällig":{ "sozialisoliertja" : 0.04 , "sozialisoliertnein": 0.96},
    "stabil,auffällig":{ "sozialisoliertja" : 0.25 , "sozialisoliertnein": 0.75},
    "instabil,unauffällig":{ "sozialisoliertja" : 0.3 , "sozialisoliertnein": 0.7},
    "instabil,auffällig":{ "sozialisoliertja" : 0.9 , "sozialisoliertnein": 0.1}
}

leistungsabfall={
    "unauffällig,vorhanden":{ "leistungsabfallja" : 0.04 , "leistungsabfallnein": 0.96},
    "unauffällig,mangelhaft":{ "leistungsabfallja" : 0.25 , "leistungsabfallnein": 0.75},
    "auffällig,vorhanden":{ "leistungsabfallja" : 0.3 , "leistungsabfallnein": 0.7},
    "auffällig,mangelhaft":{ "leistungsabfallja" : 0.9 , "leistungsabfallnein": 0.1}
}

#Abh. von aggr. Verhalten und soziale isolation
warnsignale_im_gespraech={
    "aggressivja,sozialisoliertja":{"warnsignaleja":0.9,"warnsignalenein":0.1},
    "aggressivja,sozialisoliertnein":{"warnsignaleja":0.4,"warnsignalenein":0.6},
    "aggressivnein,sozialisoliertja":{"warnsignaleja":0.3,"warnsignalenein":0.7},
    "aggressivnein,sozialisoliertnein":{"warnsignaleja":0.03,"warnsignalenein":0.97}
}

#Abh. von Aggr. Verhalten

vorherige_vorfaelle={
    "aggressivja":{"vorherigefaelleja":0.9,"vorherigefaellenein":0.1},
    "aggressivnein":{"vorherigefaelleja":0.03,"vorherigefaellenein":0.97}

}

#Zielvariable: gefahrenpotential

gefahrenpotential={
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.995,"gefahrmittel":0.005,"gefahrhoch":0.0},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.9,"gefahrmittel":0.08,"gefahrhoch":0.02},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.89,"gefahrmittel":0.09,"gefahrhoch":0.02},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.92,"gefahrmittel":0.07,"gefahrhoch":0.01},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.82,"gefahrmittel":0.15,"gefahrhoch":0.03},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.91,"gefahrmittel":0.08,"gefahrhoch":0.01},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.8,"gefahrmittel":0.16,"gefahrhoch":0.04},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.4,"gefahrmittel":0.3,"gefahrhoch":0.3},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.2,"gefahrmittel":0.35,"gefahrhoch":0.45},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.78,"gefahrmittel":0.2,"gefahrhoch":0.02},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.65,"gefahrmittel":0.3,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.15,"gefahrmittel":0.35,"gefahrhoch":0.5},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.15,"gefahrmittel":0.35,"gefahrhoch":0.5},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.12,"gefahrmittel":0.28,"gefahrhoch":0.6},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.08,"gefahrmittel":0.22,"gefahrhoch":0.7},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.02,"gefahrmittel":0.08,"gefahrhoch":0.9}
}


samplelist = []
def forward_sampling(noSamples):
  samplelist = [] # Wichtig, die Liste bei jedem Aufruf neu zu initialisieren
  for i in range(noSamples): # Korrigiere den Schleifenbereich
    aktSample = []
    rnd = r.random()
    if(rnd <= familiaeres_uUmfeld['stabil']):
      aktSample.append('stabil')
    else:
      aktSample.append('instabil')

    rnd = r.random()
    if(rnd < psychische_gesundheit['unauffällig']):
      aktSample.append('unauffällig')
    else:
      aktSample.append('auffällig')

    rnd = r.random()
    if(rnd < schulische_unterstuetzung['vorhanden']):
      aktSample.append('vorhanden')
    else:
      aktSample.append('mangelhaft')

    # Sample aggressives Verhalten
    if(aktSample[0] == 'stabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      aktSample.append('aggressivja' if rnd <= aggressives_verhalten['stabil,unauffällig']['aggressivja'] else 'aggressivnein')
    elif(aktSample[0] == 'stabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      aktSample.append('aggressivja' if rnd <= aggressives_verhalten['stabil,auffällig']['aggressivja'] else 'aggressivnein')
    elif (aktSample[0] == 'instabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      aktSample.append('aggressivja' if rnd <= aggressives_verhalten['instabil,unauffällig']['aggressivja'] else 'aggressivnein')
    elif (aktSample[0] == 'instabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      aktSample.append('aggressivja' if rnd <= aggressives_verhalten['instabil,auffällig']['aggressivja'] else 'aggressivnein')

    # Sample soziale isolation
    if(aktSample[0] == 'stabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      aktSample.append('sozialisoliertja' if rnd < soziale_isolation['stabil,unauffällig']['sozialisoliertja'] else 'sozialisoliertnein')
    elif(aktSample[0] == 'stabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      aktSample.append('sozialisoliertja' if rnd < soziale_isolation['stabil,auffällig']['sozialisoliertja'] else 'sozialisoliertnein')
    elif (aktSample[0] == 'instabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      aktSample.append('sozialisoliertja' if rnd < soziale_isolation['instabil,unauffällig']['sozialisoliertja'] else 'sozialisoliertnein')
    elif(aktSample[0] == 'instabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      aktSample.append('sozialisoliertja' if rnd < soziale_isolation['instabil,auffällig']['sozialisoliertja'] else 'sozialisoliertnein')

    # Sample Leistungsabfall
    if(aktSample[1] == 'unauffällig' and aktSample[2] == 'vorhanden'):
      rnd = r.random()
      aktSample.append('leistungsabfallja' if rnd < leistungsabfall['unauffällig,vorhanden']['leistungsabfallja'] else 'leistungsabfallnein')
    elif(aktSample[1] == 'unauffällig' and aktSample[2] == 'mangelhaft'):
      rnd = r.random()
      aktSample.append('leistungsabfallja' if rnd < leistungsabfall['unauffällig,mangelhaft']['leistungsabfallja'] else 'leistungsabfallnein')
    elif(aktSample[1] == 'auffällig' and aktSample[2] == 'vorhanden'):
      rnd = r.random()
      aktSample.append('leistungsabfallja' if rnd < leistungsabfall['auffällig,vorhanden']['leistungsabfallja'] else 'leistungsabfallnein')
    elif(aktSample[1] == 'auffällig' and aktSample[2] == 'mangelhaft'):
      rnd = r.random()
      aktSample.append('leistungsabfallja' if rnd < leistungsabfall['auffällig,mangelhaft']['leistungsabfallja'] else 'leistungsabfallnein')

    # Sample warnsignale im Gespräch
    if(aktSample[3] == 'aggressivja' and aktSample[4] == 'sozialisoliertja'):
      rnd = r.random()
      aktSample.append('warnsignaleja' if rnd < warnsignale_im_gespraech['aggressivja,sozialisoliertja']['warnsignaleja'] else 'warnsignalenein')
    elif(aktSample[3]=="aggressivja" and aktSample[4]=="sozialisoliertnein"):
      rnd = r.random()
      aktSample.append('warnsignaleja' if rnd < warnsignale_im_gespraech['aggressivja,sozialisoliertnein']['warnsignaleja'] else 'warnsignalenein')
    elif(aktSample[3]=="aggressivnein" and aktSample[4]=="sozialisoliertja"):
      rnd = r.random()
      aktSample.append('warnsignaleja' if rnd < warnsignale_im_gespraech['aggressivnein,sozialisoliertja']['warnsignaleja'] else 'warnsignalenein')
    elif(aktSample[3]=="aggressivnein" and aktSample[4]=="sozialisoliertnein"):
      rnd = r.random()
      aktSample.append('warnsignaleja' if rnd < warnsignale_im_gespraech['aggressivnein,sozialisoliertnein']['warnsignaleja'] else 'warnsignalenein')

    # Sample vorherige Vorfälle
    if(aktSample[3] == 'aggressivja'):
      rnd = r.random()
      aktSample.append('vorherigefaelleja' if rnd < vorherige_vorfaelle['aggressivja']['vorherigefaelleja'] else 'vorherigefaellenein')
    elif(aktSample[3] == 'aggressivnein'):
      rnd = r.random()
      aktSample.append('vorherigefaellenein' if rnd < vorherige_vorfaelle['aggressivnein']['vorherigefaellenein'] else 'vorherigefaelleja')

    # Sample Zielvariable
    key = (f"{aktSample[3]},{aktSample[4]},{aktSample[5]},{aktSample[6]},{aktSample[7]}")
    rnd = r.random()
    if rnd < gefahrenpotential[key]['gefahrniedrig']:
        aktSample.append('gefahrniedrig')
    elif rnd < gefahrenpotential[key]['gefahrniedrig'] + gefahrenpotential[key]['gefahrmittel']:
        aktSample.append('gefahrmittel')
    else:
        aktSample.append('gefahrhoch')

    samplelist.append(aktSample)

  return samplelist

def count_occurrences(samples):
  counts = {'gefahrniedrig': 0, 'gefahrmittel': 0, 'gefahrhoch': 0}
  for s in samples:
    if len(s) > 8: # Stelle sicher, dass das Gefahrenpotenzial im Sample vorhanden ist
      gefahr = s[-1]
      if gefahr in counts:
        counts[gefahr] += 1
  return counts

st.title('Bayes'sches Netzwerk zur Gefährdervorhersage')

num_samples = st.slider('Anzahl der Stichproben:', min_value=100, max_value=10000, value=1000, step=100)

if st.button('Starte Simulation'):
  with st.spinner(f'Führe {num_samples} Simulationen durch...'):
    sampled_data = forward_sampling(num_samples)
    gefahr_counts = count_occurrences(sampled_data)

    total_samples = len(sampled_data)
    if total_samples > 0:
      probabilities = {
          'niedrig': gefahr_counts['gefahrniedrig'] / total_samples,
          'mittel': gefahr_counts['gefahrmittel'] / total_samples,
          'hoch': gefahr_counts['gefahrhoch'] / total_samples
      }

      st.subheader('Wahrscheinlichkeiten des Gefahrenpotenzials:')
      st.write(f"Niedrig: {probabilities['niedrig']:.2f}")
      st.write(f"Mittel: {probabilities['mittel']:.2f}")
      st.write(f"Hoch: {probabilities['hoch']:.2f}")

      # Visualisierung als Balkendiagramm
      data = pd.DataFrame(list(probabilities.items()), columns=['Gefahrenpotenzial', 'Wahrscheinlichkeit'])
      chart = alt.Chart(data).mark_bar().encode(
          x='Gefahrenpotenzial',
          y='Wahrscheinlichkeit:Q',
          tooltip=['Gefahrenpotenzial', alt.Tooltip('Wahrscheinlichkeit', format=".2f")]
      ).properties(
          title='Verteilung des Gefahrenpotenzials'
      )
      st.altair_chart(chart, use_container_width=True)
    else:
      st.warning('Es wurden keine Stichproben generiert.')