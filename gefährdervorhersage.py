# -*- coding: utf-8 -*-
"""gefährdervorhersage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HAJIUiVTVSb5QYBPtGwaSREEqJ5Zf5_Y
"""

#bayessches Netzwerk zur Gefährdervorhersage

import random as r

#A priori Knoten / Elternknoten
familiaeres_uUmfeld={
    'stabil':0.7,
    'instabil':0.3
}

psychische_gesundheit={
    'unauffällig':0.96,
    'auffällig':0.04
}

schulische_unterstuetzung={
    'vorhanden':0.55,
    'mangelhaft':45
}

#Mediatoren / Verhaltens- und Leistungsmerkmale

aggressives_verhalten={
    'stabil,unauffällig':{ "aggressivja" : 0.03 , "aggressivnein": 0.97},
    'stabil,auffällig':{ "aggressivja" : 0.25 , "aggressivnein": 0.75},
    'instabil,unauffällig':{ "aggressivja" : 0.3 , "aggressivnein": 0.7},
    'instabil,auffällig':{ "aggressivja" : 0.9 , "aggressivnein": 0.1}
}

soziale_isolation={
    "stabil,unauffällig":{ "sozialisoliertja" : 0.04 , "sozialisoliertnein": 0.96},
    "stabil,auffällig":{ "sozialisoliertja" : 0.25 , "sozialisoliertnein": 0.75},
    "instabil,unauffällig":{ "sozialisoliertja" : 0.3 , "sozialisoliertnein": 0.7},
    "instabil,auffällig":{ "sozialisoliertja" : 0.9 , "sozialisoliertnein": 0.1}
}

leistungsabfall={
    "unauffällig,vorhanden":{ "leistungsabfallja" : 0.04 , "leistungsabfallnein": 0.96},
    "unauffällig,mangelhaft":{ "leistungsabfallja" : 0.25 , "leistungsabfallnein": 0.75},
    "auffällig,vorhanden":{ "leistungsabfallja" : 0.3 , "leistungsabfallnein": 0.7},
    "auffällig,mangelhaft":{ "leistungsabfallja" : 0.9 , "leistungsabfallnein": 0.1}
}

#Abh. von aggr. Verhalten und soziale isolation
warnsignale_im_gespraech={
    "aggressivja,sozialisoliertja":{"warnsignaleja":0.9,"warnsignalenein":0.1},
    "aggressivja,sozialisoliertnein":{"warnsignaleja":0.4,"warnsignalenein":0.6},
    "aggressivnein,sozialisoliertja":{"warnsignaleja":0.3,"warnsignalenein":0.7},
    "aggressivnein,sozialisoliertnein":{"warnsignaleja":0.03,"warnsignalenein":0.97}
}

#Abh. von Aggr. Verhalten

vorherige_vorfaelle={
    "aggressivja":{"vorherigefaelleja":0.9,"vorherigefaellenein":0.1},
    "aggressivnein":{"vorherigefaelleja":0.03,"vorherigefaellenein":0.97}

}

#Zielvariable: gefahrenpotential

gefahrenpotential={
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.995,"gefahrmittel":0.005,"gefahrhoch":0.0},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.9,"gefahrmittel":0.08,"gefahrhoch":0.02},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.89,"gefahrmittel":0.09,"gefahrhoch":0.02},
"aggressivnein,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.92,"gefahrmittel":0.07,"gefahrhoch":0.01},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.82,"gefahrmittel":0.15,"gefahrhoch":0.03},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.91,"gefahrmittel":0.08,"gefahrhoch":0.01},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.8,"gefahrmittel":0.16,"gefahrhoch":0.04},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.75,"gefahrmittel":0.18,"gefahrhoch":0.07},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.55,"gefahrmittel":0.25,"gefahrhoch":0.2},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.4,"gefahrmittel":0.3,"gefahrhoch":0.3},
"aggressivnein,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.2,"gefahrmittel":0.35,"gefahrhoch":0.45},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.78,"gefahrmittel":0.2,"gefahrhoch":0.02},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.65,"gefahrmittel":0.3,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertnein,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.15,"gefahrmittel":0.35,"gefahrhoch":0.5},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.6,"gefahrmittel":0.35,"gefahrhoch":0.05},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.4,"gefahrmittel":0.4,"gefahrhoch":0.2},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertja,leistungsabfallnein,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.15,"gefahrmittel":0.35,"gefahrhoch":0.5},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaellenein":{"gefahrniedrig":0.3,"gefahrmittel":0.35,"gefahrhoch":0.35},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignalenein,vorherigefaelleja":{"gefahrniedrig":0.12,"gefahrmittel":0.28,"gefahrhoch":0.6},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaellenein":{"gefahrniedrig":0.08,"gefahrmittel":0.22,"gefahrhoch":0.7},
"aggressivja,sozialisoliertja,leistungsabfallja,warnsignaleja,vorherigefaelleja":{"gefahrniedrig":0.02,"gefahrmittel":0.08,"gefahrhoch":0.9}
}

samplelist = []
def forward_sampling(noSamples):
  for i in range(1,noSamples):
    aktSample = []
    rnd = r.random()
    if(rnd <= familiaeres_uUmfeld['stabil']):
      aktSample.append('stabil')
    else:
      aktSample.append('instabil')

    rnd = r.random()
    if(rnd < psychische_gesundheit['unauffällig']):
      aktSample.append('unauffällig')
    else:
      aktSample.append('auffällig')

    rnd = r.random()
    if(rnd < schulische_unterstuetzung['vorhanden']):
      aktSample.append('vorhanden')
    else:
      aktSample.append('mangelhaft')

#Sample aggressives Verhalten
    #rnd = r.random()
    if(aktSample[0] == 'stabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      if(rnd <= aggressives_verhalten['stabil,unauffällig']['aggressivja']):
        aktSample.append('aggressivja')
      else:
        aktSample.append('aggressivnein')

    if(aktSample[0] == 'stabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      if(rnd <= aggressives_verhalten['stabil,auffällig']['aggressivja']):
        aktSample.append('aggressivja')
      else:
        aktSample.append('aggressivnein')

    if (aktSample[0] == 'instabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      if(rnd <= aggressives_verhalten['instabil,unauffällig']['aggressivja']):
        aktSample.append('aggressivja')
      else:
        aktSample.append('aggressivnein')

    if (aktSample[0] == 'instabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      if(rnd <= aggressives_verhalten['instabil,auffällig']['aggressivja']):
        aktSample.append('aggressivja')
      else:
        aktSample.append('aggressivnein')

#Sample soziale isolation

    #rnd = r.random()
    if(aktSample[0] == 'stabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      if(rnd <soziale_isolation['stabil,unauffällig']['sozialisoliertja']):
        aktSample.append('sozialisoliertja')
      else:
        aktSample.append('sozialisoliertnein')

    if(aktSample[0] == 'stabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      if(rnd <soziale_isolation['stabil,auffällig']['sozialisoliertja']):
        aktSample.append('sozialisoliertja')
      else:
        aktSample.append('sozialisoliertnein')


    if (aktSample[0] == 'instabil' and aktSample[1] == 'unauffällig'):
      rnd = r.random()
      if(rnd <soziale_isolation['instabil,unauffällig']['sozialisoliertja']):
        aktSample.append('sozialisoliertja')
      else:
        aktSample.append('sozialisoliertnein')

    if(aktSample[0] == 'instabil' and aktSample[1] == 'auffällig'):
      rnd = r.random()
      if(rnd <soziale_isolation['instabil,auffällig']['sozialisoliertja']):
        aktSample.append('sozialisoliertja')
      else:
        aktSample.append('sozialisoliertnein')

#Sample Leistungsabfall

    #rnd = r.random()
    if(aktSample[1] == 'unauffällig' and aktSample[2] == 'vorhanden'):
      rnd = r.random()
      if(rnd <leistungsabfall['unauffällig,vorhanden']['leistungsabfallja']):
        aktSample.append('leistungsabfallja')
      else:
        aktSample.append('leistungsabfallnein')

    if(aktSample[1] == 'unauffällig' and aktSample[2] == 'mangelhaft'):
      rnd = r.random()
      if(rnd <leistungsabfall['unauffällig,mangelhaft']['leistungsabfallja']):
        aktSample.append('leistungsabfallja')
      else:
        aktSample.append('leistungsabfallnein')

    if(aktSample[1] == 'auffällig' and aktSample[2] == 'vorhanden'):
      rnd = r.random()
      if(rnd <leistungsabfall['auffällig,vorhanden']['leistungsabfallja']):
        aktSample.append('leistungsabfallja')
      else:
        aktSample.append('leistungsabfallnein')

    if(aktSample[1] == 'auffällig' and aktSample[2] == 'mangelhaft'):
      rnd = r.random()
      if(rnd <leistungsabfall['auffällig,mangelhaft']['leistungsabfallja']):
        aktSample.append('leistungsabfallja')
      else:
        aktSample.append('leistungsabfallnein')

#Sample warnsignale im Gespräch

   # rnd = r.random()
    if(aktSample[3] == 'aggressivja' and aktSample[4] == 'sozialisoliertja'):
      rnd = r.random()
      if(rnd <warnsignale_im_gespraech['aggressivja,sozialisoliertja']['warnsignaleja']):
        aktSample.append('warnsignaleja')
      else:
        aktSample.append('warnsignalenein')

    if(aktSample[3]=="aggressivja" and aktSample[4]=="sozialisoliertnein"):
      rnd = r.random()
      if(rnd <warnsignale_im_gespraech['aggressivja,sozialisoliertnein']['warnsignaleja']):
        aktSample.append('warnsignaleja')
      else:
        aktSample.append('warnsignalenein')

    if(aktSample[3]=="aggressivnein" and aktSample[4]=="sozialisoliertja"):
      rnd = r.random()
      if(rnd <warnsignale_im_gespraech['aggressivnein,sozialisoliertja']['warnsignaleja']):
        aktSample.append('warnsignaleja')
      else:
        aktSample.append('warnsignalenein')

    if(aktSample[3]=="aggressivnein" and aktSample[4]=="sozialisoliertnein"):
      rnd = r.random()
      if(rnd <warnsignale_im_gespraech['aggressivnein,sozialisoliertnein']['warnsignaleja']):
        aktSample.append('warnsignaleja')
      else:
        aktSample.append('warnsignalenein')

#Sample vorherige Vorfälle

    #rnd = r.random()
    if(aktSample[3] == 'aggressivja'):
      rnd = r.random()
      if(rnd <vorherige_vorfaelle['aggressivja']['vorherigefaelleja']):
        aktSample.append('vorherigefaelleja')
      else:
        aktSample.append('vorherigefaellenein')

    if(aktSample[3] == 'aggressivnein'):
      rnd = r.random()
      if(rnd <vorherige_vorfaelle['aggressivnein']['vorherigefaellenein']):
        aktSample.append('vorherigefaellenein')
      else:
        aktSample.append('vorherigefaelleja')

#Sample Zielvariable

    key = (f"{aktSample[3]},{aktSample[4]},{aktSample[5]},{aktSample[6]},{aktSample[7]}")
    # Ensure the correct spelling for leistungsabfall in the key

    rnd = r.random()
    if rnd < gefahrenpotential[key]['gefahrniedrig']:
        aktSample.append('gefahrniedrig')
    elif rnd < gefahrenpotential[key]['gefahrniedrig'] + gefahrenpotential[key]['gefahrmittel']:
        aktSample.append('gefahrmittel')
    else:
        aktSample.append('gefahrhoch')

    samplelist.append(aktSample)

  return samplelist

#Führe Sampling durch
forward_sampling(100)

#Samplelist ausgeben
def printSampleList():
  for s in samplelist:
    print(s)
    print("\n")

#Berechne Wahrscheinlichkeiten
def countOcurrances(attribut):
  counter = 0
  for s in samplelist:
    if attribut.lower() in s:
      counter += 1
  return counter


printSampleList()
print(round(countOcurrances('gefahrhoch')/len(samplelist),2))

!pip install streamlit==1.22.0